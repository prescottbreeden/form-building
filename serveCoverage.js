/* eslint-disable no-console */

const http = require('http');
const fs = require('fs');
const path = require('path');

const helpMessage = `
 * [ INSTRUCTIONS ]
 * This script serves the coverage files generated by istanbul on port 5500
 *
 * To view them locally on your machine, add the following line to your ssh
 * config:
 *
 * LocalForward 5500 localhost:5500 # serve coverage
 *
 * [ Run ]
 * 1) $ npm run jest --coverage --workspace=@looker/web
 *
 * You should see the following output:
 *
 * report is created on:
 * /usr/local/google/home/{ldap}/{helltool-path}/apps/web/test/output/jest/report.html
 *
 * 2) $ npm run serve-coverage
 *
 * You should see the following output: 'Coverage Report @ localhost:5500'
 *
 * 3) Open localhost:5500
 *
 * Any changes to coverage reports will be picked up while the server is running.
 *
 * [ Options ]
 * The server by default will print out all requests while running for
 * debugging purposes.
 *
 * To disable logging use:
 *
 * $ npm run serve-coverage -- -s
 * $ npm run serve-coverage -- --silent
`;

// --[ Constants ]-------------------------------------------------------------
const COVERAGE_LOCATION = '/coverage/lcov-report/';
const DIR_LOCATION = process.argv.slice(2)[0];
const OPTIONS = process.argv.slice(3)[0];
const SILENT = OPTIONS === '-s' || OPTIONS === '--silent';
const HELP = OPTIONS === '-h' || OPTIONS === '--help';

// --[ Utils ]-----------------------------------------------------------------
const pipe =
  (...fns) =>
  a =>
    fns.reduce((acc, curr) => curr(acc), a);
const otherwise = () => true;
const eq =
  (a = '') =>
  (b = '') =>
    a === b;
const cond = predFnMatrix => arg => {
  for (const [pred, fn] of predFnMatrix) {
    if (pred(arg)) return fn(arg);
  }
};
const read = str => obj => obj[str];
const trace = msg => x => {
  console.log(msg, x);
  return x;
};

// --[ Helpers ]---------------------------------------------------------------
const urlPath = url =>
  path.join(__dirname, DIR_LOCATION, COVERAGE_LOCATION, url);

const file = pipe(read('url'), urlPath);

const getContentType = (fileName = '') => {
  return cond([
    [eq('.js'), () => 'text/javascript'],
    [eq('.css'), () => 'text/css'],
    [eq('.json'), () => 'application/json'],
    [eq('.png'), () => 'image/png'],
    [otherwise, () => 'text/html'],
  ])(path.extname(fileName));
};

// --[ I/O ]-------------------------------------------------------------------
const traceRequest = props => {
  if (!SILENT) {
    pipe(read('req'), file, trace('file name: '))(props);
  }
  return props;
};

const shortCircuitFavicon = ({ res }) => {
  res.writeHead(200, { 'Content-Type': 'image/x-icon' });
  res.end();
};

const handleError = ({ req, res, err }) => {
  res.writeHead(404);
  console.error(`Unable to read file: ${file(req)}`);
  console.error(`Error: ${JSON.stringify(err)}`);
  res.end(JSON.stringify(err));
};

const writeResponse = ({ req, res, data }) => {
  res.writeHead(200, {
    'Content-Type': pipe(file, getContentType)(req),
  });
  res.end(data);
};

const sendFile = ({ req, res }) => {
  if (req.url === '/') {
    req.url = '/index.html';
  }
  fs.readFile(file(req), (err, data) => {
    return err
      ? handleError({ req, res, err })
      : writeResponse({ req, res, data });
  });
};

// --[ Help Menu ]-------------------------------------------------------------
if (HELP) {
  console.log(helpMessage);
  process.exit();
}

// --[ HTTP Server ]-----------------------------------------------------------
http
  .createServer((req, res) => {
    pipe(
      traceRequest,
      cond([
        [pipe(read('req'), file, eq('/favicon.ico')), shortCircuitFavicon],
        [otherwise, sendFile],
      ])
    )({ req, res });
  })
  .listen(5500, trace('Coverage Report @ localhost:5500'));

